{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mariy\\\\AI-Sherlock-Holmes\\\\frontend\\\\src\\\\hooks\\\\useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing authentication\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      // For now, we'll implement a simple session check\n      // In a real app, this would check with your auth service\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        setIsAuthenticated(true);\n        setUser({\n          id: '1',\n          name: 'User'\n        });\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      // Mock login - replace with actual authentication\n      const {\n        username,\n        password\n      } = credentials;\n      if (username && password) {\n        const token = 'mock_token_' + Date.now();\n        localStorage.setItem('auth_token', token);\n        setIsAuthenticated(true);\n        setUser({\n          id: '1',\n          name: username\n        });\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    isLoading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"DWYc3rL2TxqYN/SbfDP+VouFzLA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","isLoading","setIsLoading","checkAuthStatus","token","localStorage","getItem","id","name","error","console","login","credentials","username","password","Date","now","setItem","success","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mariy/AI-Sherlock-Holmes/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing authentication\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      // For now, we'll implement a simple session check\r\n      // In a real app, this would check with your auth service\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n        setIsAuthenticated(true);\r\n        setUser({ id: '1', name: 'User' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      // Mock login - replace with actual authentication\r\n      const { username, password } = credentials;\r\n      \r\n      if (username && password) {\r\n        const token = 'mock_token_' + Date.now();\r\n        localStorage.setItem('auth_token', token);\r\n        setIsAuthenticated(true);\r\n        setUser({ id: '1', name: username });\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token');\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}