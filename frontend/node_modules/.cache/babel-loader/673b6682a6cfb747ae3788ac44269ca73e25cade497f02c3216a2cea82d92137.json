{"ast":null,"code":"// Session management utilities\n\nexport const generateSessionId = () => {\n  // Generate a unique session ID\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 15);\n  return `session_${timestamp}_${randomStr}`;\n};\nexport const getSessionId = () => {\n  // Get existing session ID from localStorage or generate new one\n  let sessionId = localStorage.getItem('session_id');\n  if (!sessionId) {\n    sessionId = generateSessionId();\n    localStorage.setItem('session_id', sessionId);\n  }\n  return sessionId;\n};\nexport const clearSession = () => {\n  // Clear session data\n  localStorage.removeItem('session_id');\n  localStorage.removeItem('chat_history');\n};\nexport const saveChatToLocal = (sessionId, messages) => {\n  // Save chat messages to localStorage as backup\n  try {\n    const key = `chat_${sessionId}`;\n    localStorage.setItem(key, JSON.stringify(messages));\n  } catch (error) {\n    console.error('Failed to save chat to localStorage:', error);\n  }\n};\nexport const loadChatFromLocal = sessionId => {\n  // Load chat messages from localStorage\n  try {\n    const key = `chat_${sessionId}`;\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : [];\n  } catch (error) {\n    console.error('Failed to load chat from localStorage:', error);\n    return [];\n  }\n};\nexport const formatTimestamp = timestamp => {\n  // Format timestamp for display\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diff = now - date;\n\n  // Less than 1 minute\n  if (diff < 60000) {\n    return 'Just now';\n  }\n\n  // Less than 1 hour\n  if (diff < 3600000) {\n    const minutes = Math.floor(diff / 60000);\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  }\n\n  // Less than 1 day\n  if (diff < 86400000) {\n    const hours = Math.floor(diff / 3600000);\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  }\n\n  // More than 1 day\n  const days = Math.floor(diff / 86400000);\n  return `${days} day${days > 1 ? 's' : ''} ago`;\n};\nexport const truncateText = (text, maxLength = 100) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};","map":{"version":3,"names":["generateSessionId","timestamp","Date","now","toString","randomStr","Math","random","substring","getSessionId","sessionId","localStorage","getItem","setItem","clearSession","removeItem","saveChatToLocal","messages","key","JSON","stringify","error","console","loadChatFromLocal","data","parse","formatTimestamp","date","diff","minutes","floor","hours","days","truncateText","text","maxLength","length"],"sources":["C:/Users/mariy/AI-Sherlock-Holmes/frontend/src/utils/session.js"],"sourcesContent":["// Session management utilities\r\n\r\nexport const generateSessionId = () => {\r\n  // Generate a unique session ID\r\n  const timestamp = Date.now().toString(36);\r\n  const randomStr = Math.random().toString(36).substring(2, 15);\r\n  return `session_${timestamp}_${randomStr}`;\r\n};\r\n\r\nexport const getSessionId = () => {\r\n  // Get existing session ID from localStorage or generate new one\r\n  let sessionId = localStorage.getItem('session_id');\r\n  \r\n  if (!sessionId) {\r\n    sessionId = generateSessionId();\r\n    localStorage.setItem('session_id', sessionId);\r\n  }\r\n  \r\n  return sessionId;\r\n};\r\n\r\nexport const clearSession = () => {\r\n  // Clear session data\r\n  localStorage.removeItem('session_id');\r\n  localStorage.removeItem('chat_history');\r\n};\r\n\r\nexport const saveChatToLocal = (sessionId, messages) => {\r\n  // Save chat messages to localStorage as backup\r\n  try {\r\n    const key = `chat_${sessionId}`;\r\n    localStorage.setItem(key, JSON.stringify(messages));\r\n  } catch (error) {\r\n    console.error('Failed to save chat to localStorage:', error);\r\n  }\r\n};\r\n\r\nexport const loadChatFromLocal = (sessionId) => {\r\n  // Load chat messages from localStorage\r\n  try {\r\n    const key = `chat_${sessionId}`;\r\n    const data = localStorage.getItem(key);\r\n    return data ? JSON.parse(data) : [];\r\n  } catch (error) {\r\n    console.error('Failed to load chat from localStorage:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const formatTimestamp = (timestamp) => {\r\n  // Format timestamp for display\r\n  const date = new Date(timestamp);\r\n  const now = new Date();\r\n  const diff = now - date;\r\n  \r\n  // Less than 1 minute\r\n  if (diff < 60000) {\r\n    return 'Just now';\r\n  }\r\n  \r\n  // Less than 1 hour\r\n  if (diff < 3600000) {\r\n    const minutes = Math.floor(diff / 60000);\r\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n  }\r\n  \r\n  // Less than 1 day\r\n  if (diff < 86400000) {\r\n    const hours = Math.floor(diff / 3600000);\r\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n  }\r\n  \r\n  // More than 1 day\r\n  const days = Math.floor(diff / 86400000);\r\n  return `${days} day${days > 1 ? 's' : ''} ago`;\r\n};\r\n\r\nexport const truncateText = (text, maxLength = 100) => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}